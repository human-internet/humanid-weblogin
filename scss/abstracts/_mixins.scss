@mixin box-shadow($shadow...) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

@mixin border-radius($border-radius...) {
    -webkit-border-radius: $border-radius;
    -moz-border-radius: $border-radius;
    border-radius: $border-radius;
}

@mixin transition($transition...) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

@mixin translate($translate...) {
    -webkit-transform: translate($translate);
    -moz-transform: translate($translate);
    -ms-transform: translate($translate);
    -o-transform: translate($translate);
    transform: translate($translate);
}

@mixin rotate($rotate...) {
    -webkit-transform: rotate($rotate);
    -moz-transform: rotate($rotate);
    -ms-transform: rotate($rotate);
    -o-transform: rotate($rotate);
    transform: rotate($rotate);
}

@mixin filter($filter...) {
    -webkit-filter: $filter;
    -moz-filter: $filter;
    -o-filter: $filter;
    filter: $filter;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
        eot: "?",
        svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
        otf: "opentype",
        ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        font-display: swap;
        src: $src;
    }
}

@mixin centerAbsolute() {
    top: 50%;
    left: 50%;
    @include translate(-50%, -50%);
}

@mixin centerAbsoluteVertical() {
    top: 50%;
    left: 0;
    @include translate(0, -50%);
}

@mixin fullAbsoluteEmpty() {
    position: absolute;
    width: 100%;
    height: 100%;
    content: '';
    left: 0;
    top: 0;
}

@mixin sectionPadding() {
    padding: rem(50px 0);
}

@mixin resetList() {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

@mixin font-custom($family, $weight, $style) {
    font-family: font-family($family);
    font-weight: $weight;
    font-style: font-style($style);
}

@mixin font-size($size){
    @each $name, $value in $size {
        .humanid-fz-#{$name}{
            font-size: $value;
        }
    }
}

@mixin text-color($colors) {
    @each $name, $value in $colors {
        .humanid-text-#{$name}{
            color: $value !important;
        }
    }
}

@mixin link-color($colors) {
    @each $name, $value in $colors {
        .humanid-link-#{$name}, .link-#{$name}:hover {
            color: $value;
        }
    }
}

@mixin space-child($type, $value) {
    > {
        :not([hidden]) ~ :not([hidden]) {
            $space-reverse: 0;
            @if $type == 'x' {
                margin-right: calc(#{$value} * #{$space-reverse});
                margin-left: calc(#{$value} * calc(1 - #{$space-reverse}));
            } @else {
                margin-top: calc(#{$value} * calc(1 - #{$space-reverse}));
                margin-bottom: calc(#{$value} * #{$space-reverse});
            }
        }
    }
}
